#!/bin/bash
#
# Creates swap file on the temp drive

# Use the value from the parameter file if it exists
# You can always set /etc/makeswap-on-azure/swap_size to your desired size and restart service.
# See https://github.com/ppdac/makeswap-on-azure.service#adjust-amount-of-virtual-memory
readonly CONFIG_DIR='/etc/makeswap-on-azure'
readonly PARAMETER_FILE="$CONFIG_DIR/swap_size"
readonly SWAP_FILE='/mnt/pagefile'

# Usage: logger "This will be logged."
logger() {
    echo "[makeswap-on-azure]: $*" >&1
}

# Usage: err "This is sent to STDERR before returning 1 on exit."
err() {
    echo "[makeswap-on-azure]: $*" >&2
    exit 1
}


#######################################
# Converts a string to a form that looks like an integer of bytes
# See https://github.com/soyfrien/makeswap-on-azure.service/issues/16
# Arguments:
#   human_readable_size
# Returns:
#   bytestring
#######################################
human_to_bytestring() {
    local temp="$1"
    
    logger "Begin Github magic."
    # ü™Ñüßü‚Äç‚ôÄÔ∏èüßüüßü‚Äç‚ôÇÔ∏èüßôüèΩ‚Äç‚ôÄÔ∏èüßôüèΩüßôüèΩ‚Äç‚ôÇÔ∏èü§πüèª‚Äç‚ôÄÔ∏èü§πüèøü§πüèº‚Äç‚ôÇÔ∏èüßåü™Ñ
    logger "End Github magic."
    
    local bytestring="$temp"
    echo "$bytestring"
}

#######################################
# Allocates disk space, creates swap file and enables it
# Globals:
#   PARAMETER_FILE
#   SWAP_FILE
# Arguments:
#   swap_size
# Returns:
#   0 or non-zero on error.
#######################################
commit_swap() {
    local swap_size="$1"

    # https://github.com/ppdac/makeswap-on-azure.service/issues/3
    chmod ugo+w "$PARAMETER_FILE"
    if (($? == 0)); then
        logger "chmod ugo+w $PARAMETER_FILE"
    else
        err "chmod ugo+w $PARAMETER_FILE failed"
    fi

    local FREE_DISK_SPACE=$(df | grep /mnt | gawk '{print int($4/1024)}')
    if [ "$FREE_DISK_SPACE" -gt 0 ]; then
        logger "${FREE_DISK_SPACE}M available disk space (rounding down for safety)."
    else
        err "${FREE_DISK_SPACE} bytes is not enough to proceed."
    fi

    base=$(echo "${swap_size: -1}")

    # If swap_size is in bytes, make sure it is an integer
    if [ "$base" != "G" ] && [ "$base" != "g" ] && [ "$base" != "M" ] && [ "$base" != "m" ] && [ "$base" != "K" ] && [ "$base" != "k" ]; then
        swap_size=$(echo "$swap_size" | gawk '{print int($1)}')
        logger "swap_size is in bytes and is santized."
    fi
    
    # Get disk space as bytes
    logger "Getting free disk space as bytes."
    FREE_DISK_SPACE=$(df | grep /mnt | gawk '{print int($4)}')
    logger "Free disk space as bytes: $FREE_DISK_SPACE"

    logger "swap_size before conversion: $swap_size"
    swap_size=$(human_to_bytestring "$swap_size")
    logger "swap_size after conversion: $swap_size"

    # If this is true it exits returning 1
    if [[ "$swap_size" < "$FREE_DISK_SPACE" ]]; then
        err "Not enough free disk space."
    else
        logger "There is enough free disk space."
    fi

    fallocate -l "$swap_size" "$SWAP_FILE"
    if (($? == 0)); then
        logger "Allocated $swap_size for $SWAP_FILE"
    else
        err "Failed to allocate $swap_size to $SWAP_FILE"
    fi

    chmod 600 "$SWAP_FILE"
    if (($? == 0)); then
        logger "Set 600 permissions on $SWAP_FILE"
    else
        err "Failed to set 600 permissions on $SWAP_FILE"
    fi

    mkswap "$SWAP_FILE"
    if (($? == 0)); then
        logger "Recreated swap file $SWAP_FILE"
    else
        err "Failed to recreate swap file $SWAP_FILE"
    fi

    swapon "$SWAP_FILE"
    if (($? == 0)); then
        logger "The ${SWAP_FILE} swap file was enabled as $SWAP_FILE."
    else
        err "Failed to enable the swap file $SWAP_FILE"
    fi
}

#######################################
# Turns off he swap function and deletes the swap file
# Globals:
#   PARAMETER_FILE
# Arguments:
#   None
# Returns:
#   0 or non-zero on error.
#######################################
remove_swap() {
    if [ -f "$SWAP_FILE" ] ; then
        logger "Swap file already exists, removing it."
        swapoff "$SWAP_FILE"
        if (($? == 0)); then
            logger "Swap disabled."
        else
            err  "Failed to disable swap."
        fi

        rm "$SWAP_FILE"
        if (($? == 0)); then
            logger "$SWAP_FILE was removed."
        else
            err "Failed to remove swap file from $SWAP_FILE"
        fi
    fi
}

#######################################
# Calculate size of swap appropriate with respect to space and memory
# Globals:
#   PARAMETER_FILE
# Arguments:
#   None
# Returns:
#   0 if calculation completed, non-zero on error.
#######################################
calculate_swap_size() {
    local readonly FILESYSTEM=$(df | grep /mnt | gawk '{print $1}')

    # Azure won't give you the full amount of RAM as some of it is taken by platform services.
    # Approximating 512 MiB to 512 * 1024, and so on, is close enough for these increments
    # lop off decimals with int(float)
    local readonly MEM_TOTAL=$(cat /proc/meminfo | grep MemTotal | gawk '{print int($2/1024)}')
    logger "Total RAM: ${MEM_TOTAL}M."

    # Kilobyes/1024+0.5 is good for general rounding, but we don't want more than is available
    local readonly FREE_DISK_SPACE=$(df | grep /mnt | gawk '{print int($4/1024)}')
    if [ "$FREE_DISK_SPACE" -gt 0 ]; then
        logger "${FREE_DISK_SPACE}M available disk space on $FILESYSTEM (rounding down for safety)."
    else
        err "{FREE_DISK_SPACE} bytes is not enough to proceed. Please free up some space on $FILESYSTEM."
    fi

    # Fork me ¬Ø\_(„ÉÑ)_/¬Ø  
    if [ "$FREE_DISK_SPACE" -ge 256 ]; then
        if [ "$MEM_TOTAL" -lt 512 ]; then
            echo 256M > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 1024 ] && [ 512 -le "$FREE_DISK_SPACE" ];then
            echo 512M > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 3072 ] && [ 1024 -le "$FREE_DISK_SPACE" ]; then
            echo 1G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 4096 ] && [ 2048 -le "$FREE_DISK_SPACE" ]; then
            echo 2G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 6144 ] && [ 4096 -le "$FREE_DISK_SPACE" ]; then
            echo 4G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 7168 ] && [ 6144 -le "$FREE_DISK_SPACE" ]; then
            echo 6G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 8192 ] && [ 7168 -le "$FREE_DISK_SPACE" ]; then
            echo 7G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 12288 ] && [ 8192 -le "$FREE_DISK_SPACE" ]; then
            echo 8G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le 16384 ] && [ 12288 -le "$FREE_DISK_SPACE" ]; then
            echo 12G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -ge 16384 ] && [ 16384 -le "$FREE_DISK_SPACE" ]; then
            echo 16G > "$PARAMETER_FILE"
        elif [ "$MEM_TOTAL" -le "$FREE_DISK_SPACE" ]; then
            echo "${FREE_DISK_SPACE}M" > "$PARAMETER_FILE"
        else
            err "Failed to calculate swap size."
        fi
    fi
    
    logger "Calculated swap size of $(cat $PARAMETER_FILE)."
}

#######################################
# Program flow structure. Called from final line.
# Globals:
#   PARAMETER_FILE
#   SWAP_FILE
# Arguments:
#   None
#######################################
main() {
    local swap_size=0
    if [ -f "$PARAMETER_FILE" ]; then
        logger "Found $PARAMETER_FILE."
        if [[ ! -z "$PARAMETER_FILE" ]]; then
            # Set the size of swap using the value stored in /etc/makeswap-on-azure/swap_size
            swap_size=$(cat "$PARAMETER_FILE")
            logger "Set the swap size to $swap_size"
        else
            logger "$PARAMETER_FILE is not set."
        fi
    fi

    if [ ! -f "$PARAMETER_FILE" ] || [ -z "$swap_size" ]; then
        logger "$PARAMETER_FILE is not present or is not set."

        mkdir -p "$CONFIG_DIR"
        if (($? == 0)); then
            logger "Created directory $CONFIG_DIR"
        else
            err "Failed create directory $CONFIG_DIR"
        fi

        touch "$PARAMETER_FILE"
        if (($? == 0)); then
            logger "Created $PARAMETER_FILE to hold swap size configuration."
        else
            err "Failed to create configuration file $PARAMETER_FILE"
        fi

        logger "Calulating appropriate swap size."
        calculate_swap_size
        swap_size=$(cat "$PARAMETER_FILE")
        if (($? != 0)); then
            err "Exception in calculate_swap_size. Please report this https://github.com/ppdac/makeswap-on-azure.service/issues/new?assignees=soyfrien&labels=bug&template=bug_report.md&title=%5BBUG%5D%20Unchecked%20exception%20in%20main%20Line%20217"
        fi
    fi

    if [ -f "$SWAP_FILE" ]; then
        logger "Removing a swap file that is already present."
        remove_swap
        if (($? != 0)); then
            err "Failed to remove existing swap file. https://github.com/ppdac/makeswap-on-azure.service/issues/new?assignees=soyfrien&labels=bug&template=bug_report.md&title=%5BBUG%5D%20Unchecked%20exception%20in%20main%20Line%20210"
        fi
    fi

    commit_swap "$swap_size"
    if (($? != 0)); then
        err "Exception in commit_swap. Please report this https://github.com/ppdac/makeswap-on-azure.service/issues/new?assignees=soyfrien&labels=bug&template=bug_report.md&title=%5BBUG%5D%20Unchecked%20exception%20in%20main%20Line%202"
    fi
}

main "$@"
